swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "camera"
  description: "Operations about camera"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /api/v1/cameras:
    post:
      tags:
      - "camera"
      summary: "Create camera"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      # - "application/xml"
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization"
        type: "string"
        required: true        
        description: "Only admin can load and config this page"

      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/Camera_no_id"
      responses:
        "200":
          description: " create user successfull"
          schema:
            $ref: '#/definitions/ApiResponse'            
        "400":
          description: "fail create user"
          schema:
            $ref: '#/definitions/ApiResponse'
    get:
      tags:
      - "camera"
      summary: "get all camera"
      description: ""
      operationId: "logoutUser"
      produces:
      # - "application/xml"
      - "application/json"
      parameters: []

      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:            
              $ref: "#/definitions/Camera"
          # headers:
          #   X-Rate-Limit:
          #     type: "integer"
          #     format: "int32"
          #     description: "calls per hour allowed by the user"
          #   X-Expires-After:
          #     type: "string"
          #     format: "date-time"
          #     description: "date in UTC when token expires"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/ApiResponse'          
  
  /api/v1/cameras/{id}:
    get:
      tags:
      - "camera"
      summary: "Get camera by id name"
      description: ""
      operationId: "getUserByName"
      produces:
      # - "application/xml"
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization"
        type: "string"
        required: true        
        description: "Only admin can load and config this page"

      - name: "id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Camera"
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/ApiResponse'          
        "401":
          description: "Authorization requirement"
          schema:
            $ref: '#/definitions/ApiResponse'          

    put:
      tags:
      - "camera"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      # - "application/xml"
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization"
        type: "string"
        required: true        
        description: "Only admin can load and config this page"
        
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/Camera_no_id"
      responses:
        "200":
          description: "successfull"
          schema:
            $ref: '#/definitions/ApiResponse'          
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/ApiResponse'          
        "401":
          description: "Authorization requirement"
          schema:
            $ref: '#/definitions/ApiResponse'          

    delete:
      tags:
      - "camera"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      # - "application/xml"
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization"
        type: "string"
        required: true
        description: "Only admin can load and config this page"

      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"

      responses:
        "200":
          description: "successfull"
          schema:
            $ref: '#/definitions/ApiResponse'         
        "400":
          description: "Bad request"
          schema:
            $ref: '#/definitions/ApiResponse'          
        "401":
          description: "Authorization requirement"
          schema:
            $ref: '#/definitions/ApiResponse'          


securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  Camera:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"          
      name:
        type: "string"
        example: "km 321+32 Nguyen Van Cuong"
      code:
        type: "string"
        example: "km321_32nguyenvancuong"
      rtsp:
        type: "string"
        example: "rtsp://admin@admin"
      aws_link:
        type: "string"
        example: "aws://admin@admin"
      lat:
        type: "string"
        example: "21.043491"
      log:
        type: "string"
        example: "25.393528"
      bus_city_id:
        type: "integer"
        format: "int64"
        example: 2
        description: "this id will maps from city table"
    xml:
      name: "camera"

  Camera_no_id:
    type: "object"
    properties:
      name:
        type: "string"
        example: "km 321+32 Nguyen Van Cuong"
      code:
        type: "string"
        example: "km321_32nguyenvancuong"
      rtsp:
        type: "string"
        example: "rtsp://admin@admin"
      aws_link:
        type: "string"
        example: "aws://admin@admin"
      lat:
        type: "string"
        example: "21.043491"
      log:
        type: "string"
        example: "25.393528"
      bus_city_id:
        type: "integer"
        format: "int64"
        example: 2
        description: "this id will maps from city table"
    xml:
      name: "camera"

  ApiResponse:
    type: "object"
    properties:
      message:
        type: "string"
        
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"